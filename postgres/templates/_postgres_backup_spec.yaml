{{- define "postgres.backup.spec" -}}
initContainers:
- name: pg-dump
  image: postgres:18.0-alpine3.22
  env:
  - name: PGHOST
    value: "postgres-service"
  - name: PGPORT
    value: "5432"
  - name: PGDATABASE
    value: "postgres"
  - name: PGUSER
    value: "postgres"
  - name: PGPASSWORD
    valueFrom:
      secretKeyRef:
        name: postgres
        key: POSTGRES_PASSWORD
  imagePullPolicy: IfNotPresent
  command: ["/bin/sh","-c"]
  args:
  - |
    cat > /loc/upload.sh << __EOF
    set -x -e -o pipefail
    date
    __EOF
    cat > /tmp/pg_dump.sh << __EOF
    set -x -e -o pipefail
    while ! pg_isready ; do date ; sleep 1 ; done
    export PGDATABASE="\$1"
    FNAME="\${PGDATABASE}-\$(date +%Y%m%d-%H%M%S).sql.gz"
    date
    pg_dump -c --if-exists | gzip > "/loc/\${FNAME}"
    date
    echo "rclone copyto -P '/loc/\${FNAME}' 'rem:\${FNAME}'" >> /loc/upload.sh
    echo "date" >> /loc/upload.sh
    __EOF
    set -x -e -o pipefail
    while ! pg_isready ; do date ; sleep 1 ; done
    psql -Atc 'select datname from pg_database' | awk '!/^template/' | xargs -n1 /bin/sh /tmp/pg_dump.sh
  volumeMounts:
  - name: vol-loc
    mountPath: /loc
  resources:
    limits:
      memory: "256Mi"
      cpu: "500m"
    requests:
      memory: "128Mi"
      cpu: "250m"
containers:
  {{- include "rclone.container" ( dict "root" . "cmd" "/bin/sh /loc/upload.sh" "volName" "vol-c" ) | nindent 0 }}
  - name: vol-loc
    mountPath: /loc
volumes:
  {{- include "rclone.volume" ( dict "root" . "volName" "vol-c" "secName" "rclone-conf" "secKey" "rcloneConf" ) | nindent 0 }}
- name: vol-loc
  emptyDir: {}
restartPolicy: OnFailure
{{- end -}}
