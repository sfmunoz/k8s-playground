apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "postgres.configmap.init" . }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
data:
  init.sh: |
    #!/bin/sh
    DNAME="full"
    set -x -e -o pipefail
    date
    cp /shared/rclone /usr/local/bin/rclone
    chown 0:0 /usr/local/bin/rclone
    chmod 755 /usr/local/bin/rclone
    date
    [ "${HOSTNAME: -2}" = "-0" ] || exec tail -f /dev/null
    LABEL=""
    if [ "$EMPTY" != "yes" ]
    then
      LABEL="$(
        rclone lsf "rem:${DNAME}" | \
        sort -r | \
        awk -F '/' '/^[0-9]{8}-[0-9]{6}-[0-9A-F]{24}\/$/ {
          print $1
          exit 0
        }'
      )"
    fi
    date
    if [ "$LABEL" != "" ]
    then
      mkdir -p "${PGDATA}"
      chown postgres:root "${PGDATA}"
      chmod 0700 "${PGDATA}"
      date
      rclone copyto -P "rem:${DNAME}/${LABEL}" "/loc/${LABEL}"
      date
      tar -C "${PGDATA}" -xvzf "/loc/${LABEL}/base.tar.gz"
      date
      tar -C "${PGDATA}/pg_wal" -xvzf "/loc/${LABEL}/pg_wal.tar.gz"
      date
      touch "${PGDATA}/recovery.signal"
      chown postgres:postgres "${PGDATA}/recovery.signal"
      chmod 600 "${PGDATA}/recovery.signal"
      rm -rf "/loc/${LABEL}"
    fi
    date
    exec docker-entrypoint.sh postgres

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "postgres.configmap.backup" . }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
data:
  backup.sh: |
    #!/bin/sh
    DNAME="full"
    set -x -e -o pipefail
    date
    cp /shared/rclone /usr/local/bin/rclone
    chown 0:0 /usr/local/bin/rclone
    chmod 755 /usr/local/bin/rclone
    while ! pg_isready ; do date ; sleep 1 ; done
    date
    LABEL="$(date +%Y%m%d-%H%M%S)"
    mkdir -p /loc
    date
    pg_basebackup -U postgres -c fast -D "/loc/${LABEL}" -l "${LABEL}" -F tar -z -P -v
    date
    pg_verifybackup -nP "/loc/${LABEL}"
    date
    START_WAL_LOCATION="$(
      tar xzf "/loc/${LABEL}/base.tar.gz" -O backup_label | \
      awk '/^START WAL LOCATION:/ {
        print substr($6,1,24)
      }'
    )"
    date
    if [ "${#START_WAL_LOCATION}" != "24" ]
    then
      echo "error: wrong START_WAL_LOCATION='${START_WAL_LOCATION}' (length is not 24)"
      exit 1
    fi
    rclone copyto -P "/loc/${LABEL}" "rem:${DNAME}/${LABEL}-${START_WAL_LOCATION}"
    date
  cleanup.sh: |
    [ "$FULL_KEEP" = "" ] && FULL_KEEP="10"
    DNAME="full"
    set -x -e -o pipefail
    # cleanup (full backups)
    date
    rclone lsf "rem:${DNAME}" | \
      awk -F '/' '/^[0-9]{8}-[0-9]{6}-[0-9A-F]{24}\/$/ {
        print $1
      }' | \
      sort | \
      head -n -${FULL_KEEP} | \
      awk -v DNAME="${DNAME}" '{
        printf("rclone -v delete rem:%s/%s\n",DNAME,$1)
      }' | \
      sh -x -e -o pipefail
    # cleanup (WALs)
    date
    WAL_MIN="$(
      rclone lsf "rem:${DNAME}" | \
      sort | \
      awk -F '/' '/^[0-9]{8}-[0-9]{6}-[0-9A-F]{24}\/$/ {
        print substr($1,17)
        exit 0
      }'
    )"
    date
    if [ "${#WAL_MIN}" != "24" ]
    then
      echo "notice: cannot use WAL_MIN='${WAL_MIN}' (length is not 24)"
      exit 0
    fi
    rclone lsf rem:pg_wal | \
      awk -v WAL_MIN="${WAL_MIN}" -F '/' '
        BEGIN {
          WAL_MIN_8 = substr(WAL_MIN,1,8)
        }
        /^[0-9A-F]{24}\.([0-9A-F]{8}\.backup\.)?gz$/ {
          if ( substr($1,1,24) < WAL_MIN ) {
            printf("rclone -v delete rem:pg_wal/%s\n",$1)
          }
        }
        /^[0-9A-F]{8}\.history\.gz$/ {
          if ( substr($1,1,8) < WAL_MIN_8 ) {
            printf("rclone -v delete rem:pg_wal/%s\n",$1)
          }
        }
      ' | \
      sh -x -e -o pipefail
    date

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "postgres.configmap.entrypoint" . }}
  labels:
    {{- include "postgres.labels" . | nindent 4 }}
data:
  0_pg_hba.sh: |
    #!/bin/sh
    cat >> "${PGDATA}/pg_hba.conf" << __EOF
    host replication all all scram-sha-256
    __EOF
  1_postgresql_conf.sh: |
    #!/bin/sh
    cat << __EOF >> "${PGDATA}/postgresql.conf"
    wal_level = replica
    wal_compression = on
    archive_mode = on
    archive_command = 'set -x -e -o pipefail ; gzip -c %p | rclone -P rcat rem:pg_wal/%f.gz'
    archive_timeout = 30
    restore_command = 'set -x -e -o pipefail ; rclone -P cat rem:pg_wal/%f.gz | gunzip > %p'
    __EOF
